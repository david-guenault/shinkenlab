# This config file defined Shinken specific objects like
# satellites or Realms
#
# This file is for defined a pure load balanced environnement
# That mean that if a satellite die, it will not be replaced
# There is only one Realm with every components into it
# All you need to to is to replace "node1" and "node2" by the DNS
# names of your Shinken servers

# IMPORTANT NOTE : 
# This is a example configuration, without modules, to show
# how load-balancing can be configured for your daemons.


# The scheduler is a "Host manager". It gets the hosts and theirs
# services and it schedules the checks for the pollers.
define scheduler{
       scheduler_name  scheduler-1
       address         node1
       port            7768
       spare           0	;is not a spare
       realm           All
       weight          1       ; optional: 1
       #modules        No modules this is an example
}


# The second scheduler
define scheduler{
       scheduler_name  scheduler-2
       address         node2
       port            7768
       spare           0
       realm           All
       weight          1  ; optional: 1
       #modules        No modules this is an example
}


# There is only one reactionner, because it does not need
# load balancing load
define reactionner{
       reactionner_name  reactionner
       address           node1
       port              7769
       spare             0
       realm             All
       manage_sub_realms 0  ; optional: 1
       min_workers       1  ; optional: 1
       max_workers       15 ; optional: 30
       polling_interval  1  ; optional: 1
       #modules        No modules this is an example
}

# Pollers are here to launch checks
define poller{
       poller_name          poller-All
       address              node1
       port                 7771
       realm                All
       manage_sub_realms    0	; optional: 0
       min_workers          4	; optional: 1
       max_workers          4	; optional: 30
       processes_by_worker  256    ; optional: 256
       polling_interval     1      ; optional: 1
       #modules        No modules this is an example
}


# Pollers are here to launch checks
define poller{
       poller_name           poller-2
       address               node2
       port                  7771
       realm                 All
       manage_sub_realms     0	; optional: 0
       min_workers           4	; optional: 1
       max_workers           4	; optional: 30
       processes_by_worker   256	; optional: 256
       polling_interval      1     ; optional: 1
       #modules        No modules this is an example
}


# The arbiter definition is optional
# Like reactionner and broker, it does not need load balancing
define arbiter{
       arbiter_name	Arbiter
       host_name	node1       ;result of the get_hostname.py command (or hostname under Unix)
       address	node1
       port	7770
       spare	0
       #modules        No modules this is an example
}


# The broker manage data export (in flat file or in database)
# Here just log files as an example
define broker{
       broker_name	broker
       address	node1
       port	7772
       spare	0
       realm 	All
       manage_sub_realms 1
       manage_arbiters	 1
       #modules        No modules this is an example
}

# A global Realm
define realm{
       realm_name  All
       default		1
}